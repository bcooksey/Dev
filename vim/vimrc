" Vimrc File
" Maintainer: Brian Cooksey
"
" Adapted From: amix the lucky stiff
"               http://amix.dk - amix@amix.dk
"               Version 3.6 - 25/08/10 14:40:30
"                 http://amix.dk/vim/vimrc.html
"
" Sections:
"    -> General
"    -> VIM user interface
"    -> Colors and Fonts
"    -> Files and backups
"    -> Text, tab and indent related
"    -> Visual mode related
"    -> Command mode related
"    -> Moving around, tabs and buffers
"    -> Statusline
"    -> Parenthesis/bracket expanding
"    -> General Abbrevs
"    -> Editing mappings
"
"    -> Cope
"    -> Omni complete functions
"    -> Python section
"    -> JavaScript section
"
"
" Plugins:
"       (Not currently included. Need to investigate)
"     > yankring.vim - http://www.vim.org/scripts/script.php?script_id=1234
"       Emacs's killring, useful when using the clipboard:
"           info -> :help yankring
"
"     > surround.vim - https://github.com/tpope/vim-surround
"       Makes it easy to work with surrounding text:
"           info -> :help surround
"
"     > Command-T - https://github.com/wincent/Command-T
"       Command-T plug-in provides an extremely fast, intuitive mechanism for opening files:
"           info -> :help CommandT

"     > LustyExplorer - http://www.vim.org/scripts/script.php?script_id=1890
"       Buffer and file explorer. Let's you walk directory trees easily:
"           info -> :e ~/.vim_runtime/vim/bundle/lusty-explorer/README
"
"     > keepcase.vim - http://www.vim.org/scripts/script.php?script_id=6
"       Substitution that respects the existing capitalization in the words you are replacing
"           info -> :e ~/.vim_runtime/vim/bundle/keepcase/README

"     > tComment - http://www.vim.org/scripts/script.php?script_id=1173
"       Quickly comment/uncomment sections of code:
"           info -> :e ~/.vim_runtime/vim/bundle/tComment/doc/tcomment.txt
"
"     > characterize.vim - https://github.com/tpope/vim-characterize
"       Quickly see a character's representation in decimal, octal, and hex
"
"     > eunuch.vim - https://github.com/tpope/vim-eunuch
"       Vim sugar for the UNIX shell commands that need it the most
"
"     > fugitive.vim - https://github.com/tpope/vim-fugitive
"       Git wrapper
"
" Language_Plugins:
"
"     > python_pydoc.vim - http://www.vim.org/scripts/script.php?script_id=910
"       Python documentation view- and search-tool (via system pydoc command)
"           info -> :e ~/.vim_runtime/vim/bundle/pydoc/README
"
"     > syntastic.vim - https://github.com/scrooloose/syntastic
"       Syntax checker for a boat-load of languages and tools

"     > scss-syntax.vim - https://github.com/cakebaker/scss-syntax.vim
"       Vim Syntax File for SCSS
"
"     > vim-coffee-script - https://github.com/kchmck/vim-coffee-script
"       CoffeeScript support for vim
"
"     > vim-golang - https://github.com/jnwhiteh/vim-golang
"       Golang support. Apparently deprecated...use the history

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" Load Pathogen (plugin manager)
execute pathogen#infect()

" Sets how many lines of history VIM has to remember
set history=700

" Enable file type detection
" Also load indent files, to automatically do language-dependent indenting.
filetype plugin on
filetype indent on

" Set to auto read when a file is changed from the outside
set autoread

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","
let g:mapleader = ","

" Fast saving
nmap <leader>w :w<cr>

" Fast editing of the .vimrc
map <leader>e :e! ~/dev/dev-env/vim/vimrc<cr>

" When vimrc is edited, reload it
autocmd! bufwritepost vimrc source ~/dev/dev-env/vim/vimrc

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Make ; be : (never used default behavior of ; anyway)
nnoremap ; :
vnoremap ; :

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set 12 lines to the curors - when moving vertical..
set so=12

set wildmenu " Turn on WiLd menu

set ruler " Always show the cursor position

set cmdheight=2 " The commandbar height

set hid " Change buffer - without saving

" Set backspace config
set backspace=eol,start,indent " Allow backspacing over everything in insert mode
set whichwrap+=<,>,h,l

set ignorecase " Ignore case when searching
set smartcase

set hlsearch " Highlight search things

set incsearch " Do incremental searching
set nolazyredraw " Don't redraw while executing macros 

set magic " Set magic on, for regular expressions

set showmatch " Show matching bracets when text indicator is over them
set mat=2 " How many tenths of a second to blink

" No sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

set showcmd		" display incomplete commands

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax enable "Enable syntax hl

" Set font according to system
if MySys() == "mac"
  set gfn=Monaco:h12
  set shell=/bin/bash
elseif MySys() == "windows"
"   set gfn=Courier\ New:h10
    set gfn=Consolas:h11:cANSI
"    set gfn=Lucida\ Console:h10
elseif MySys() == "linux"
  set gfn=Monospace\ 9
  set shell=/bin/bash
endif

set background=dark

if has("gui_running")
  set guioptions-=m " nuke menu bar 
  set guioptions-=T " nuke toolbar
  set guioptions-=r " nuke right-hand scroll bar
  set guioptions-=R " nuke right-hand scroll bar in vsplit
  set guioptions-=l " nuke left-hand scroll bar
  set guioptions-=L " nuke left-hand scroll bar in vsplit
  set showtabline=0 " nuke tab bar
  set t_Co=256
  colorscheme molokai 
else
  colorscheme molokai
endif

set number " Shows numbers along left column
set encoding=utf8
try
    lang en_US
catch
endtry

set ffs=unix,dos,mac "Default file types


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off, since most stuff is in SVN, git anyway...
set nobackup
set nowb
set noswapfile

" Persistent undo
" try
"     if MySys() == "windows"
"       set undodir=C:\Windows\Temp
"     else
"       set undodir=~/.vim_runtime/undodir
"     endif
"     
"     set undofile
" catch
" endtry

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
" inoremap <C-U> <C-G>u<C-U>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set expandtab
set shiftwidth=4
set tabstop=4
set smarttab

set textwidth=0

set lbr
set tw=500

set ai "Auto indent
set si "Smart indet
" Prevent comments from outdenting
inoremap # X<C-H>#
set wrap "Wrap lines


""""""""""""""""""""""""""""""
" => Visual mode related
""""""""""""""""""""""""""""""
" Really useful!
"  In visual mode when you press * or # to search for the current selection
vnoremap <silent> * :call VisualSearch('f')<CR>
vnoremap <silent> # :call VisualSearch('b')<CR>

" When you press gv you vimgrep after the selected text
vnoremap <silent> gv :call VisualSearch('gv')<CR>
map <leader>g :vimgrep // **/*.<left><left><left><left><left><left><left>


function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction 

" From an idea by Michael Naumann
function! VisualSearch(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Command mode related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Smart mappings on the command line
cno $h e ~/
cno $d e ~/Desktop/
cno $j e ./
cno $c e <C-\>eCurrentFileDir("e")<cr>

" $q is super useful when browsing on the command line
cno $q <C-\>eDeleteTillSlash()<cr>

" Bash like keys for the command line
cnoremap <C-A>		<Home>
cnoremap <C-E>		<End>
cnoremap <C-K>		<C-U>

cnoremap <C-P> <Up>
cnoremap <C-N> <Down>

" Useful on some European keyboards
" map ½ $
" imap ½ $
" vmap ½ $
" cmap ½ $

func! Cwd()
  let cwd = getcwd()
  return "e " . cwd 
endfunc

func! DeleteTillSlash()
  let g:cmd = getcmdline()
  if MySys() == "linux" || MySys() == "mac"
    let g:cmd_edited = substitute(g:cmd, "\\(.*\[/\]\\).*", "\\1", "")
  else
    let g:cmd_edited = substitute(g:cmd, "\\(.*\[\\\\]\\).*", "\\1", "")
  endif
  if g:cmd == g:cmd_edited
    if MySys() == "linux" || MySys() == "mac"
      let g:cmd_edited = substitute(g:cmd, "\\(.*\[/\]\\).*/", "\\1", "")
    else
      let g:cmd_edited = substitute(g:cmd, "\\(.*\[\\\\\]\\).*\[\\\\\]", "\\1", "")
    endif
  endif   
  return g:cmd_edited
endfunc

func! CurrentFileDir(cmd)
  return a:cmd . " " . expand("%:p:h") . "/"
endfunc

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Map space to / (search) and c-space to ? (backgwards search)
"map <space> /
"map <c-space> ?
map <silent> <space> :noh<cr>

" Smart way to move btween windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Navigate by display lines, not physical lines
" See http://vim.wikia.com/wiki/VimTip38
set virtualedit=block
"setlocal linebreak nolist
"setlocal display+=lastline
"noremap  <buffer> <silent> <Up>   gk
"noremap  <buffer> <silent> <Down> gj
"noremap  <buffer> <silent> <Home> g<Home>
"noremap  <buffer> <silent> <End>  g<End>
"inoremap <buffer> <silent> <Up>   <C-o>gk
"inoremap <buffer> <silent> <Down> <C-o>gj
"inoremap <buffer> <silent> <Home> <C-o>g<Home>
"inoremap <buffer> <silent> <End>  <C-o>g<End>
"noremap  <buffer> <silent> k gk
"noremap  <buffer> <silent> j gj
"noremap  <buffer> <silent> 0 g0
"noremap  <buffer> <silent> $ g$

" Close the current buffer
map <leader>bd :Bclose<cr>

" Close all the buffers
map <leader>ba :1,300 bd!<cr>

" Use the arrows to something usefull
"map <right> :bn<cr>
"map <left> :bp<cr>

" Tab configuration
map <leader>tn :tabnew<cr>
map <leader>te :tabedit 
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove 

" When pressing <leader>cd switch to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>


command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")

   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif

   if bufnr("%") == l:currentBufNum
     new
   endif

   if buflisted(l:currentBufNum)
     execute("bdelete! ".l:currentBufNum)
   endif
endfunction

" Specify the behavior when switching between buffers 
try
  set switchbuf=useopen
catch
endtry

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
" Also don't do it when the mark is in the first line, that is the default
" position when opening a file.
autocmd BufReadPost *
  \ if line("'\"") > 1 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif


""""""""""""""""""""""""""""""
" => Statusline
""""""""""""""""""""""""""""""
" Always show the statusline
set laststatus=2

" Format the statusline
"set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{CurDir()}%h\ \ \ Line:\ %l/%L:%c
set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ Line:\ %l/%L:%c


function! CurDir()
    let curdir = substitute(getcwd(), '/Users/briancooksey/', "~/", "g")
    return curdir
endfunction

function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    else
        return ''
    endif
endfunction


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Parenthesis/bracket expanding
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
vnoremap $1 <esc>`>a)<esc>`<i(<esc>
vnoremap $2 <esc>`>a]<esc>`<i[<esc>
vnoremap $3 <esc>`>a}<esc>`<i{<esc>
vnoremap $$ <esc>`>a"<esc>`<i"<esc>
"vnoremap $q <esc>`>a'<esc>`<i'<esc>
"vnoremap $e <esc>`>a"<esc>`<i"<esc>

" Map auto complete of (, ", ', [
"inoremap $1 ()<esc>i
"inoremap $2 []<esc>i
"inoremap $3 {}<esc>i
"inoremap $4 {<esc>o}<esc>O
"inoremap $q ''<esc>i
"inoremap $e ""<esc>i
"inoremap $t <><esc>i


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General Abbrevs
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
iab xdate <c-r>=strftime("%d/%m/%y %H:%M:%S")<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Editing mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Remap VIM 0
map 0 ^

"Move a line of text using ALT+[jk] or Comamnd+[jk] on mac
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

if MySys() == "mac"
  nmap <D-j> <M-j>
  nmap <D-k> <M-k>
  vmap <D-j> <M-j>
  vmap <D-k> <M-k>
endif

"Delete trailing white space, useful for Python ;)
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()

" Make ;; escape insert mode
inoremap ;; <ESC>
inoremap jj <ESC>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Cope
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Do :help cope if you are unsure what cope is. It's super useful!
map <leader>cc :botright cope<cr>
map <leader>n :cn<cr>
map <leader>p :cp<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Omni complete functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd FileType css set omnifunc=csscomplete#CompleteCSS


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

"Shortcuts using <leader>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=

""""""""""""""""""""""""""""""
" => Perl section
""""""""""""""""""""""""""""""
au BufRead,BufNewFile *.pm setfiletype perl
au BufRead,BufNewFile *.pl setfiletype perl
au FileType perl imap <c-l> print STDERR "\n>>>>>>>>>" .  . "\n";<esc>BBhi

""""""""""""""""""""""""""""""
" => JavaScript section
""""""""""""""""""""""""""""""
au FileType javascript call JavaScriptFold()
au FileType javascript setl fen
au FileType javascript setl nocindent
au FileType javascript set shiftwidth=2
au FileType javascript set tabstop=2

au FileType javascript imap <c-t> console.dir();<esc>hi
au FileType javascript imap <c-a> console.debug();<esc>hi
" au FileType javascript nmap gqaj :%!python -m json.tool<CR>
nmap gqaj :%!python -m json.tool<CR>

au FileType javascript inoremap <buffer> $r return 
au FileType javascript inoremap <buffer> $f //--- PH ----------------------------------------------<esc>FP2xi

function! JavaScriptFold() 
    setl foldmethod=syntax
    setl foldlevelstart=1
    syn region foldBraces start=/{/ end=/}/ transparent fold keepend extend

    function! FoldText()
    return substitute(getline(v:foldstart), '{.*', '{...}', '')
    endfunction
    setl foldtext=FoldText()
endfunction

""""""""""""""""""""""""""""""
" => Coffescript section
""""""""""""""""""""""""""""""
au FileType coffee set shiftwidth=3
au FileType coffee set tabstop=3

""""""""""""""""""""""""""""""
" => Puppet section
""""""""""""""""""""""""""""""
" detect puppet filetype
au BufRead,BufNewFile *.pp set filetype=puppet

""""""""""""""""""""""""""""""
" => TT section
""""""""""""""""""""""""""""""
au BufNewFile,BufRead *.tt setf tt2

""""""""""""""""""""""""""""""
" => PHP section
""""""""""""""""""""""""""""""
"au BufNewFile,BufRead *.php setf php
au FileType php imap <c-l> echo "<pre>";<cr>var_dump();<cr>echo "</pre>";<esc>khi$
au FileType php imap <c-d> ini_set('display_errors', 1);<cr>error_reporting(E_ERROR);
au FileType php imap <c-t> /**<cr><esc>==a @test<cr>/<cr>public function () {<cr>}<esc>kwwi

""""""""""""""""""""""""""""""
" => Bash section
""""""""""""""""""""""""""""""
"au BufNewFile,BufRead bash_* set syn sh

""""""""""""""""""""""""""""""
" => Python section
""""""""""""""""""""""""""""""
au FileType python set shiftwidth=4
au FileType python set tabstop=4
au FileType python imap <c-d> import ipdb; ipdb.set_trace()<esc>

" TODO: Incoroproate this as a snippet
" import xml.dom.minidom
" xml = xml.dom.minidom.parse('./foo.xml')
" pretty_xml_as_string = xml.toprettyxml()
" f = open('./foo_pretty.xml', 'w')
" f.write(pretty_xml_as_string)
" f.close()
"

""""""""""""""""""""""""""""""
" => Go section
""""""""""""""""""""""""""""""
au FileType go set shiftwidth=4
au FileType go set tabstop=4

""""""""""""""""""""""""""""""
" => Command-T
""""""""""""""""""""""""""""""
let g:CommandTMaxHeight = 15
set wildignore+=*.o,*.obj,.git,*.pyc
noremap <leader>tt :CommandT<cr>
noremap <leader>tb :CommandTBuffer<cr>
noremap <leader>tf :CommandTFlush<cr>

""""""""""""""""""""""""""""""
" => Syntastic
""""""""""""""""""""""""""""""
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_python_checkers = ['python', 'flake8']
let g:syntastic_enable_signs = 1

""""""""""""""""""""""""""""""
" => Vim grep
""""""""""""""""""""""""""""""
let Grep_Skip_Dirs = 'RCS CVS SCCS .svn generated'
set grepprg=/bin/grep\ -nH


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => MISC
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remove the Windows ^M - when the encodings gets messed up
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

"Quickly open a buffer for scratch
map <leader>q :e ~/buffer<cr>
au BufRead,BufNewFile ~/buffer iab <buffer> xh1 ===========================================

map <leader>pp :setlocal paste!<cr>

map <leader>bb :cd ..<cr>
